{"version":3,"sources":["components/SubReddit.js","components/PostDetails.js","components/Posts.js","container/Reddit.js","store/actions.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["SubReddit","props","subreddit","subreddits","map","className","style","backgroundColor","selectedRedditName","data","display_name","onClick","click","key","id","length","fontWeight","PostDetails","post","url","preview","images","source","src","alt","width","height","title","author","href","target","rel","Posts","posts","useState","selectedPost","setSelectedPost","Reddit","state","getPostsForSubReddit","bind","this","initSubReddits","redditName","getPosts","setState","error","loading","Component","connect","subReddits","dispatch","payload","urlPoint","fetch","then","response","json","type","children","catch","actionType","App","Boolean","window","location","hostname","match","initialState","reducer","action","concat","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.abb64836.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nfunction SubReddit(props) {\n  let subreddit=null;\n  if(props.subreddits){\n    subreddit=props.subreddits.map((subreddit)=>{\n      return (\n      <li \n        className=\"ul-item\" \n        style={{backgroundColor: (props.selectedRedditName === subreddit.data.display_name) && 'rgb(204, 168, 121)'}} \n        onClick={()=>props.click(subreddit.data.display_name)} \n        key={subreddit.data.id}>\n          {subreddit.data.display_name}\n      </li>)\n    })\n  }\n  return (\n    <Fragment>\n      <ul className=\"nolist\">\n        {props.subreddits.length>0 && <li style={{fontWeight:'bold'}}>Sub Reddits</li>}\n        {subreddit}\n      </ul>\n    </Fragment>\n  );\n}\n\nexport default SubReddit;\n","import React from 'react';\n\nfunction PostDetails(props) {\n  let {post}=props;\n  let url=post.data.preview?.images[0].source.url;\n\n    return (\n      <div className=\"panel\"> \n        {url && <img src={url} alt=\"Loading..\" style={{width:'20%',height:'20%'}}></img>}\n        <p>{post.data.title}</p>\n        <p>Author: {post.data.author}</p>\n        <a className=\"button\" href={post.data.url} target=\"_blank\" rel=\"noopener noreferrer\">Read Post</a>\n      </div>\n      )\n    }\n\nexport default PostDetails;\n","import React, { useState } from 'react';\nimport PostDetails from '../components/PostDetails';\n\nfunction Posts(props) {\n  let posts=null;\n  const [selectedPost, setSelectedPost] = useState('');\n  if (props.posts) {\n    posts = props.posts.map((post) => {\n      return (\n        <div className=\"outerContainer\">\n          <li \n            className=\"post-li\" \n            style={{ backgroundColor: (selectedPost === post.data.title) && 'rgb(204, 168, 121)' }} \n            onClick={() => setSelectedPost(post.data.title)} \n            key={post.data.id}>\n              {post.data.title}\n          </li>\n          {selectedPost === post.data.title && <PostDetails selectedPost={selectedPost} post={post}></PostDetails>}\n        </div>\n      );\n    });\n  }\n  return (\n    <ul>\n      {props.posts.length > 0 && <li className=\"nolist\" style={{ fontWeight: 'bold' }}>Posts</li>}\n      {posts}\n    </ul>\n  );\n}\n\nexport default Posts;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport * as actionType from './../store/actions';\nimport { connect } from 'react-redux';\nimport SubReddit from './../components/SubReddit';\nimport Posts from './../components/Posts';\n\nclass Reddit extends Component {\n  constructor(){\n    super();\n    this.state={\n      selectedRedditName:false\n    }\n    this.getPostsForSubReddit=this.getPostsForSubReddit.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.initSubReddits();\n  } \n\n  getPostsForSubReddit(redditName){\n    if(redditName !== this.state.selectedRedditName) this.props.getPosts(redditName);\n    this.setState({selectedRedditName:redditName});\n  }\n\n  render(){\n    return (\n      <div className=\"reddit-container\">\n        {this.props.error && <div>Please try after sometime</div>}\n        {this.props.loading && <div className=\"loader\"></div>}\n        <SubReddit \n          className=\"subreddit-container\" \n          selectedRedditName={this.state.selectedRedditName} \n          subreddits={this.props.subreddits} \n          click={this.getPostsForSubReddit}>\n        </SubReddit>\n        <Posts \n          className=\"posts-container\" \n          posts={this.props.posts}>\n        </Posts> \n      </div>   \n    )\n  } \n}\n\nconst mapStateToProps=(state)=>{\n  const { subReddits,posts,error,loading } = state;\n  return {\n    subreddits:subReddits,\n    error:error,\n    posts:posts,\n    loading:loading,\n  }\n}\n\nconst mapDispatchToProps= dispatch=>{\n  return {\n    getPosts: (redditName)=>dispatch(actionType.getPosts(redditName)),\n    initSubReddits:()=>dispatch(actionType.initSubReddits())\n  }\n} \n\nexport default connect(mapStateToProps,mapDispatchToProps)(Reddit);\n\n\n","export const SET_SUBREDDITS='SET_SUBREDDITS';\nexport const GET_POSTS='GET_POSTS';\nexport const GET_SUBREDDITS_FAILED='GET_SUBREDDITS_FAILED';\nexport const GET_POSTS_FAILED='GET_POSTS_FAILED';\n\nexport const setSubReddits=(subReddits)=>{\n  return {\n    type:'SET_SUBREDDITS',\n    subReddits:subReddits,\n  };\n};\n\nexport const getSubRedditsFailed=()=>{\n  return {\n    type:'GET_SUBREDDITS_FAILED',\n  };\n};\n\nexport const initSubReddits=()=>{\n  return dispatch=>{\n    fetch(' https://www.reddit.com/subreddits/popular.json?raw_json=1')\n    .then(response => response.json())\n    .then(data => dispatch(setSubReddits(data.data.children)))\n    .catch(error=> dispatch(getSubRedditsFailed()));\n  }\n};\n\nexport const setPosts=(posts)=>{\n  return {\n    type:'GET_POSTS',\n    posts:posts,\n  }\n};\n\nexport const getPostsFailed=()=>{\n  return {\n    type:'GET_POSTS_FAILED',\n  };\n};\n\nexport const getPosts=(payload)=>{\n  let urlPoint=`https://www.reddit.com/r/${payload}/hot.json?raw_json=1`;\n  return dispatch => {\n    fetch(urlPoint)\n    .then(response=>response.json())\n    .then(data => dispatch(setPosts(data.data.children)))\n    .catch((error)=> dispatch(getPostsFailed()));\n  }\n};\n","import React, {Component, Fragment } from 'react';\nimport Reddit from './container/Reddit';\n\nclass App extends Component {\n \n  render(){\n    return (\n      <Fragment>\n        <div className=\"header\">\n          <h1>Reddits</h1>\n        </div>\n        <Reddit className=\"reddit-container\"></Reddit>\n      </Fragment>\n      )\n    } \n  }\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions';\n\nconst initialState={\n  subReddits: [],\n  posts:[],\n  error:false,\n  loading:true,\n};\n\nconst reducer=(state = initialState, action) => {\n switch(action.type){\n   case actionTypes.SET_SUBREDDITS: \n      return{\n        ...state,\n        subReddits:state.subReddits.concat(action.subReddits),\n        loading:false,\n        error:false,\n      }\n   case actionTypes.GET_SUBREDDITS_FAILED:\n      return{\n        ...state,\n        error:true,\n      }    \n   case actionTypes.GET_POSTS_FAILED:\n      return{\n        ...state,\n        error:true,\n      }  \n   case actionTypes.GET_POSTS:\n      return{\n        ...state,\n        posts:action.posts,\n        error:false,\n      }\n    default: return state;\n }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';  \n\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}