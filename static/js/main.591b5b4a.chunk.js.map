{"version":3,"sources":["store/actions.js","components/SubReddit.js","components/PostDetails.js","components/Posts.js","container/Reddit.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["setSubReddits","subReddits","type","getSubRedditsFailed","SubReddit","props","subreddit","subreddits","map","className","style","backgroundColor","selectedRedditName","data","display_name","onClick","click","key","id","length","fontWeight","PostDetails","post","url","preview","images","source","src","alt","width","height","title","author","href","target","rel","Posts","posts","useState","selectedPost","setSelectedPost","Reddit","handleSearchText","e","setState","searchText","value","charCode","search","handleSearch","state","initSubReddits","getPostsForSubReddit","bind","this","redditName","getPosts","loading","onChange","error","Component","connect","dispatch","payload","urlPoint","fetch","then","response","json","children","catch","actionType","App","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.591b5b4a.chunk.js","sourcesContent":["export const SET_SUBREDDITS = \"SET_SUBREDDITS\";\nexport const GET_POSTS = \"GET_POSTS\";\nexport const GET_SUBREDDITS_FAILED = \"GET_SUBREDDITS_FAILED\";\nexport const GET_POSTS_FAILED = \"GET_POSTS_FAILED\";\n\nexport const setSubReddits = (subReddits) => {\n  return {\n    type: \"SET_SUBREDDITS\",\n    subReddits: subReddits,\n  };\n};\n\nexport const search = (searchText) => {\n  return (dispatch) => {\n    fetch(\n      `https://www.reddit.com/subreddits/search.json?q=${searchText}&raw_json=1`\n    )\n      .then((response) => response.json())\n      .then((data) => dispatch(setSubReddits(data.data.children)))\n      .catch((error) => dispatch(getSubRedditsFailed()));\n  };\n};\n\nexport const getSubRedditsFailed = () => {\n  return {\n    type: \"GET_SUBREDDITS_FAILED\",\n  };\n};\n\nexport const initSubReddits = () => {\n  return (dispatch) => {\n    fetch(\" https://www.reddit.com/subreddits/popular.json?raw_json=1\")\n      .then((response) => response.json())\n      .then((data) => dispatch(setSubReddits(data.data.children)))\n      .catch((error) => dispatch(getSubRedditsFailed()));\n  };\n};\n\nexport const setPosts = (posts) => {\n  return {\n    type: \"GET_POSTS\",\n    posts: posts,\n  };\n};\n\nexport const getPostsFailed = () => {\n  return {\n    type: \"GET_POSTS_FAILED\",\n  };\n};\n\nexport const getPosts = (payload) => {\n  let urlPoint = `https://www.reddit.com/r/${payload}/hot.json?raw_json=1`;\n  return (dispatch) => {\n    fetch(urlPoint)\n      .then((response) => response.json())\n      .then((data) => dispatch(setPosts(data.data.children)))\n      .catch((error) => dispatch(getPostsFailed()));\n  };\n};\n","import React, { Fragment } from \"react\";\n\nfunction SubReddit(props) {\n  let subreddit = null;\n  if (props.subreddits) {\n    subreddit = props.subreddits.map((subreddit) => {\n      return (\n        <li\n          className=\"ul-item\"\n          style={{\n            backgroundColor:\n              props.selectedRedditName === subreddit.data.display_name &&\n              \"rgb(204, 168, 121)\",\n          }}\n          onClick={() => props.click(subreddit.data.display_name)}\n          key={subreddit.data.id}\n        >\n          {subreddit.data.display_name}\n        </li>\n      );\n    });\n  }\n  return (\n    <Fragment>\n      <ul className=\"nolist\">\n        {props.subreddits.length > 0 && (\n          <li style={{ fontWeight: \"bold\" }}>Sub Reddits</li>\n        )}\n        {subreddit}\n      </ul>\n    </Fragment>\n  );\n}\n\nexport default SubReddit;\n","import React from \"react\";\n\nfunction PostDetails(props) {\n  let { post } = props;\n  let url = post.data.preview?.images[0].source.url;\n\n  return (\n    <div className=\"panel\">\n      {url && (\n        <img\n          src={url}\n          alt=\"Loading..\"\n          style={{ width: \"20%\", height: \"20%\" }}\n        ></img>\n      )}\n      <p>{post.data.title}</p>\n      <p>Author: {post.data.author}</p>\n      <a\n        className=\"button\"\n        href={post.data.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Read Post\n      </a>\n    </div>\n  );\n}\n\nexport default PostDetails;\n","import React, { useState } from \"react\";\nimport PostDetails from \"../components/PostDetails\";\n\nfunction Posts(props) {\n  let posts = null;\n  const [selectedPost, setSelectedPost] = useState(\"\");\n  if (props.posts) {\n    posts = props.posts.map((post) => {\n      return (\n        <div className=\"outerContainer\">\n          <li\n            className=\"post-li\"\n            style={{\n              backgroundColor:\n                selectedPost === post.data.title && \"rgb(204, 168, 121)\",\n            }}\n            onClick={() => setSelectedPost(post.data.title)}\n            key={post.data.id}\n          >\n            {post.data.title}\n          </li>\n          {selectedPost === post.data.title && (\n            <PostDetails selectedPost={selectedPost} post={post}></PostDetails>\n          )}\n        </div>\n      );\n    });\n  }\n  return (\n    <ul>\n      {props.posts.length > 0 && (\n        <li className=\"nolist\" style={{ fontWeight: \"bold\" }}>\n          Posts\n        </li>\n      )}\n      {posts}\n    </ul>\n  );\n}\n\nexport default Posts;\n","import React, { Component, Fragment } from \"react\";\nimport \"../App.css\";\nimport * as actionType from \"./../store/actions\";\nimport { connect } from \"react-redux\";\nimport SubReddit from \"./../components/SubReddit\";\nimport Posts from \"./../components/Posts\";\n\nclass Reddit extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedRedditName: false,\n      searchText: \"\",\n    };\n    this.getPostsForSubReddit = this.getPostsForSubReddit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.initSubReddits();\n  }\n\n  getPostsForSubReddit(redditName) {\n    if (redditName !== this.state.selectedRedditName)\n      this.props.getPosts(redditName);\n    this.setState({ selectedRedditName: redditName });\n  }\n\n  handleSearchText = (e) => {\n    this.setState({ searchText: e.target.value });\n    if (e.charCode === 13) this.props.search(e.target.value);\n  };\n\n  handleSearch = () => {\n    if (this.state.searchText) this.props.search(this.state.searchText);\n    else this.props.initSubReddits();\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {!this.props.loading && (\n          <div className=\"search\">\n            <input\n              type=\"text\"\n              onChange={(e) => this.setState({ searchText: e.target.value })}\n            ></input>\n            <input\n              type=\"button\"\n              value=\"Search\"\n              className=\"searchButton\"\n              onClick={this.handleSearch}\n            ></input>\n          </div>\n        )}\n        <div className=\"reddit-container\">\n          {this.props.error && <div>Please try after sometime</div>}\n          {this.props.loading && <div className=\"loader\"></div>}\n          <SubReddit\n            className=\"subreddit-container\"\n            selectedRedditName={this.state.selectedRedditName}\n            subreddits={this.props.subreddits}\n            click={this.getPostsForSubReddit}\n          ></SubReddit>\n          <Posts className=\"posts-container\" posts={this.props.posts}></Posts>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { subReddits, posts, error, loading } = state;\n  return {\n    subreddits: subReddits,\n    error: error,\n    posts: posts,\n    loading: loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPosts: (redditName) => dispatch(actionType.getPosts(redditName)),\n    initSubReddits: () => dispatch(actionType.initSubReddits()),\n    search: (searchText) => dispatch(actionType.search(searchText)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reddit);\n","import React, { Component, Fragment } from \"react\";\nimport Reddit from \"./container/Reddit\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <div className=\"header\">\n          <h1>Reddits</h1>\n        </div>\n        <Reddit className=\"reddit-container\"></Reddit>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"./actions\";\n\nconst initialState = {\n  subReddits: [],\n  posts: [],\n  error: false,\n  loading: true,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SUBREDDITS:\n      return {\n        ...state,\n        subReddits: action.subReddits,\n        loading: false,\n        error: false,\n      };\n    case actionTypes.GET_SUBREDDITS_FAILED:\n      return {\n        ...state,\n        error: true,\n      };\n    case actionTypes.GET_POSTS_FAILED:\n      return {\n        ...state,\n        error: true,\n      };\n    case actionTypes.GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n        error: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';  \n\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}